{"ast":null,"code":"import { loadGame, startBoard } from '../api/gameApi';\nimport { START_GAME_SUCCESS, RESET_GAME, CELL_STATUS, UPDATE_GAME, FLIP_CELL, LOAD_BOARD_SUCCESS } from '../constants/actionTypes';\nexport function startGameBoard() {\n  console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n  return startGameSuccess(loadGame());\n}\n\nfunction startGameSuccess(boardWithMines) {\n  console.log(\"Estoy en startGameSuccess dentro de /actions\");\n  console.log(boardWithMines);\n  console.log(\"listo\");\n  var data = {\n    board: boardWithMines,\n    game_status: 0,\n    board_status: startBoard(),\n    flipped_boxes: 0\n  };\n  fetch('/game/start', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return console.log(response);\n  })[\"catch\"](function (error) {\n    return console.log('error', error);\n  });\n  return {\n    type: START_GAME_SUCCESS,\n    boardWithMines: boardWithMines\n  };\n}\n\nexport function restartGame() {\n  startGameBoard();\n}\nexport function switchFlag(coordinates) {\n  console.log(\"estamos en la funcion switchFlag\");\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(response.json);\n      dispatch(flagSuccess(response));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cell_status: response\n  };\n}","map":{"version":3,"sources":["/home/valter/Documents/HOMIE/PROYECTO/Proyect/SEARCH_MINES_V1/app/javascript/src/actions/actions.js"],"names":["loadGame","startBoard","START_GAME_SUCCESS","RESET_GAME","CELL_STATUS","UPDATE_GAME","FLIP_CELL","LOAD_BOARD_SUCCESS","startGameBoard","console","log","startGameSuccess","boardWithMines","data","board","game_status","board_status","flipped_boxes","fetch","method","body","JSON","stringify","headers","then","response","error","type","restartGame","switchFlag","coordinates","dispatch","json","flagSuccess","cell_status"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,gBAArC;AACA,SACEC,kBADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,kBANF,QAOO,0BAPP;AASA,OAAO,SAASC,cAAT,GAA0B;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACA,SAAQC,gBAAgB,CAACX,QAAQ,EAAT,CAAxB;AACD;;AAED,SAASW,gBAAT,CAA0BC,cAA1B,EAA0C;AACxCH,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYE,cAAZ;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,MAAIG,IAAI,GAAG;AACTC,IAAAA,KAAK,EAAEF,cADE;AAETG,IAAAA,WAAW,EAAE,CAFJ;AAGTC,IAAAA,YAAY,EAAEf,UAAU,EAHf;AAITgB,IAAAA,aAAa,EAAE;AAJN,GAAX;AAMAC,EAAAA,KAAK,CAAC,aAAD,EAAgB;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAFa;AAGnBU,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAHU,GAAhB,CAAL,CAKCC,IALD,CAKM,UAAAC,QAAQ;AAAA,WAAIhB,OAAO,CAACC,GAAR,CAAYe,QAAZ,CAAJ;AAAA,GALd,WAMO,UAAAC,KAAK;AAAA,WAAIjB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBgB,KAArB,CAAJ;AAAA,GANZ;AAQA,SAAO;AACLC,IAAAA,IAAI,EAAEzB,kBADD;AAELU,IAAAA,cAAc,EAAdA;AAFK,GAAP;AAID;;AAED,OAAO,SAASgB,WAAT,GAAuB;AAC5BpB,EAAAA,cAAc;AACf;AAED,OAAO,SAASqB,UAAT,CAAoBC,WAApB,EAAiC;AACtCrB,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,SAAO,UAASqB,QAAT,EAAmB;AACxB,QAAIlB,IAAI,GAAG;AACTiB,MAAAA,WAAW,EAAEA;AADJ,KAAX;AAGAZ,IAAAA,KAAK,CAAC,YAAD,EAAe;AAClBC,MAAAA,MAAM,EAAE,MADU;AAElBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAFY;AAGlBU,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHS,KAAf,CAAL,CAKCC,IALD,CAKM,UAAAC,QAAQ,EAAI;AAChBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYe,QAAQ,CAACO,IAArB;AACAD,MAAAA,QAAQ,CAACE,WAAW,CAACR,QAAD,CAAZ,CAAR;AACD,KATD,WAUO,UAAAC,KAAK;AAAA,aAAIjB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBgB,KAArB,CAAJ;AAAA,KAVZ;AAWD,GAfD;AAgBD;;AAED,SAASO,WAAT,CAAqBR,QAArB,EAA+B;AAC7BhB,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;AACA,SAAO;AACLE,IAAAA,IAAI,EAAEvB,WADD;AAEL8B,IAAAA,WAAW,EAAET;AAFR,GAAP;AAID","sourcesContent":["import { loadGame, startBoard } from '../api/gameApi';\nimport {\n  START_GAME_SUCCESS,\n  RESET_GAME,\n  CELL_STATUS,\n  UPDATE_GAME,\n  FLIP_CELL,\n  LOAD_BOARD_SUCCESS\n} from '../constants/actionTypes';\n\nexport function startGameBoard() {\n  console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n  return (startGameSuccess(loadGame()));\n}\n\nfunction startGameSuccess(boardWithMines) {\n  console.log(\"Estoy en startGameSuccess dentro de /actions\")\n  console.log(boardWithMines);\n  console.log(\"listo\")\n  let data = {\n    board: boardWithMines,\n    game_status: 0,\n    board_status: startBoard(),\n    flipped_boxes: 0\n  }\n  fetch('/game/start', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {'Content-Type': 'application/json' }\n  })\n  .then(response => console.log(response))\n  .catch(error => console.log('error', error));\n\n  return {\n    type: START_GAME_SUCCESS,\n    boardWithMines\n  };\n}\n\nexport function restartGame() {\n  startGameBoard();\n}\n\nexport function switchFlag(coordinates) {\n  console.log(\"estamos en la funcion switchFlag\");\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => {\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(response.json);\n      dispatch(flagSuccess(response));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cell_status: response\n  };\n}"]},"metadata":{},"sourceType":"module"}