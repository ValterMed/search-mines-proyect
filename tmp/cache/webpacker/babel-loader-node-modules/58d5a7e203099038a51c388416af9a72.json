{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { START_GAME_SUCCESS, RESET_GAME, FINISH_GAME, UPDATE_GAME, CELL_STATUS, FLIP_CELL, LOAD_BOARD_SUCCESS } from '../constants/actionTypes';\nvar gameState = {\n  data: [],\n  flippedBoxes: {\n    quantity: 0\n  },\n  gameStatus: {\n    status: 3\n  },\n  cellStatus: {\n    status: 0\n  }\n};\n\nfunction gameReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : gameState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(\"llegamos a la funcion switch de /reducers/states\");\n\n  switch (action.type) {\n    case START_GAME_SUCCESS:\n      return _objectSpread({}, state, {\n        data: [].concat(_toConsumableArray(state.data), [{\n          boardState: action.boardWithMines\n        }])\n      });\n\n    case RESET_GAME:\n      return {};\n\n    case FINISH_GAME:\n      return {};\n\n    default:\n      console.log(\"Se devuelve el valor por default en /reducers/states\");\n      console.log(state);\n      return state;\n  }\n}\n\nexport default gameReducer;","map":{"version":3,"sources":["/home/valter/Documents/HOMIE/PROYECTO/Proyect/SEARCH_MINES_V1/app/javascript/src/reducers/states.js"],"names":["START_GAME_SUCCESS","RESET_GAME","FINISH_GAME","UPDATE_GAME","CELL_STATUS","FLIP_CELL","LOAD_BOARD_SUCCESS","gameState","data","flippedBoxes","quantity","gameStatus","status","cellStatus","gameReducer","state","action","console","log","type","boardState","boardWithMines"],"mappings":";;;;;;;;;;;;;;AAAA,SACEA,kBADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,SANF,EAOEC,kBAPF,QAQS,0BART;AAUE,IAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,EADU;AAEhBC,EAAAA,YAAY,EAAE;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAFE;AAGhBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,MAAM,EAAE;AAAT,GAHI;AAIhBC,EAAAA,UAAU,EAAE;AAACD,IAAAA,MAAM,EAAE;AAAT;AAJI,CAAlB;;AAOA,SAASE,WAAT,GAAgD;AAAA,MAA3BC,KAA2B,uEAAnBR,SAAmB;AAAA,MAARS,MAAQ;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;;AACA,UAAOF,MAAM,CAACG,IAAd;AACE,SAAKnB,kBAAL;AACE,+BACKe,KADL;AAEEP,QAAAA,IAAI,+BACCO,KAAK,CAACP,IADP,IAEF;AAACY,UAAAA,UAAU,EAAEJ,MAAM,CAACK;AAApB,SAFE;AAFN;;AAQF,SAAKpB,UAAL;AACE,aAAO,EAAP;;AAGF,SAAKC,WAAL;AACE,aAAO,EAAP;;AAIF;AACEe,MAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,aAAOA,KAAP;AAtBJ;AAwBD;;AACD,eAAeD,WAAf","sourcesContent":["import {\n  START_GAME_SUCCESS,\n  RESET_GAME,\n  FINISH_GAME,\n  UPDATE_GAME,\n  CELL_STATUS,\n  FLIP_CELL,\n  LOAD_BOARD_SUCCESS\n  } from '../constants/actionTypes';\n  \n  const gameState = {\n    data: [],\n    flippedBoxes: {quantity: 0},\n    gameStatus: {status: 3},\n    cellStatus: {status: 0}\n  };\n\n  function gameReducer(state = gameState, action) {\n    console.log(\"llegamos a la funcion switch de /reducers/states\");\n    switch(action.type){\n      case START_GAME_SUCCESS:\n        return {\n          ...state,\n          data: [\n            ...state.data,\n            {boardState: action.boardWithMines}\n          ]\n        };\n\n      case RESET_GAME:\n        return {\n            \n        };\n      case FINISH_GAME:\n        return {\n                \n        };\n      \n      default:\n        console.log(\"Se devuelve el valor por default en /reducers/states\");\n        console.log(state)\n        return state\n    }\n  }\n  export default gameReducer;"]},"metadata":{},"sourceType":"module"}