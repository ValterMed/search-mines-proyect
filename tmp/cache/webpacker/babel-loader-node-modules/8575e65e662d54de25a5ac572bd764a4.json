{"ast":null,"code":"import { loadGame, startBoard } from '../api/gameApi';\nimport { START_GAME_SUCCESS, RESET_GAME, CELL_STATUS, GAME_STATUS, GAME_ID_STATUS, UPDATE_GAME, FLIP_CELL, LOAD_BOARD_SUCCESS, NOTHING } from '../constants/actionTypes'; //export function startGameBoardZZ() {\n//console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n//return (startGameSuccess(loadGame()));\n//}\n//export function startGameSuccess() {\n\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\"); //console.log(props)\n\n  var boardWithMines = loadGame();\n  console.log(boardWithMines);\n  console.log(\"listo\"); //return function(dispatch) {\n\n  console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\");\n  var data = {\n    board: boardWithMines,\n    game_status: 3,\n    board_status: startBoard(),\n    flipped_boxes: 0\n  };\n  fetch('/game/start', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log(\"respuesta del controlador con el ID:\");\n    console.log(data);\n    startGameExit(data);\n  })[\"catch\"](function (error) {\n    return console.log('error', error);\n  }); //}\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\");\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  startGameBoard();\n}\nexport function switchFlag(coordinates, myFunction, celda) {\n  console.log(\"estamos en la funcion switchFlag\");\n  console.log(coordinates);\n  console.log(myFunction);\n  console.log(celda);\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      myFunction(celda, data);\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"Estamos en un juego nuevo, obtener el Id para ir guardando los cambios\");\n    fetch('/game/get/id').then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(data);\n      gameIdSuccess(data);\n    });\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\");\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\");\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\");\n        }\n      }\n    }\n  }\n\n  return {\n    type: NOTHING\n  };\n}\n\nfunction gameIdSuccess(data) {\n  console.log(\"llegamos a GAMEIDSUCCESS\");\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid\n  };\n}\n\nexport function markTheBoard() {\n  fetch('/game/push/flag', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    myFunction(celda, data);\n    console.log(\"respuesta del estado de la celda:\");\n    console.log(data.cell_status);\n    dispatch(flagSuccess(data.cell_status));\n  })[\"catch\"](function (error) {\n    return console.log('error', error);\n  });\n}","map":{"version":3,"sources":["/home/valter/Documents/HOMIE/PROYECTO/Proyect/SEARCH_MINES_V1/app/javascript/src/actions/actions.js"],"names":["loadGame","startBoard","START_GAME_SUCCESS","RESET_GAME","CELL_STATUS","GAME_STATUS","GAME_ID_STATUS","UPDATE_GAME","FLIP_CELL","LOAD_BOARD_SUCCESS","NOTHING","startGameBoard","console","log","boardWithMines","data","board","game_status","board_status","flipped_boxes","fetch","method","body","JSON","stringify","headers","then","response","json","startGameExit","error","type","trash","restartGame","switchFlag","coordinates","myFunction","celda","dispatch","cell_status","flagSuccess","cellStatus","knowTheGameState","gameStatus","gameIdSuccess","gameId","game_id","$oid","markTheBoard"],"mappings":"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","sourcesContent":["import { loadGame, startBoard } from '../api/gameApi';\nimport {\n  START_GAME_SUCCESS,\n  RESET_GAME,\n  CELL_STATUS,\n  GAME_STATUS,\n  GAME_ID_STATUS,\n  UPDATE_GAME,\n  FLIP_CELL,\n  LOAD_BOARD_SUCCESS,\n  NOTHING\n} from '../constants/actionTypes';\n\n//export function startGameBoardZZ() {\n  //console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n  //return (startGameSuccess(loadGame()));\n//}\n\n//export function startGameSuccess() {\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\")\n  //console.log(props)\n  var boardWithMines = loadGame()\n  console.log(boardWithMines);\n  console.log(\"listo\")\n  //return function(dispatch) {\n    console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\")\n    let data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/start', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del controlador con el ID:\");\n      console.log(data);\n      startGameExit(data);\n    })\n    .catch(error => console.log('error', error));\n  //}\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\")\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  startGameBoard();\n}\n\nexport function switchFlag(coordinates, myFunction, celda) {\n  console.log(\"estamos en la funcion switchFlag\");\n  console.log(coordinates)\n  console.log(myFunction)\n  console.log(celda)\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      myFunction(celda, data)\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"Estamos en un juego nuevo, obtener el Id para ir guardando los cambios\")\n    fetch('/game/get/id')\n    .then(response => response.json())\n    .then(data =>{\n      console.log(data);\n      gameIdSuccess(data)\n    });\n\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\")\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\")\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\")\n        }\n      }\n    }\n  }\n  return {\n    type: NOTHING\n  }\n}\n\nfunction gameIdSuccess(data) {\n  console.log(\"llegamos a GAMEIDSUCCESS\")\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid\n  }\n}\n\nexport function markTheBoard () {\n  fetch('/game/push/flag', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {'Content-Type': 'application/json' }\n  })\n  .then(response => response.json())\n  .then(data => {\n    myFunction(celda, data)\n    console.log(\"respuesta del estado de la celda:\")\n    console.log(data.cell_status);\n    dispatch(flagSuccess(data.cell_status));\n  })\n  .catch(error => console.log('error', error));\n}"]},"metadata":{},"sourceType":"module"}