{"ast":null,"code":"import { loadGame, startBoard } from '../api/gameApi';\nimport { START_GAME_SUCCESS, RESTAR_GAME_SUCCESS, CELL_STATUS_SUCCESS, GAME_STATUS_SUCCESS, LOAD_GAME_SUCCESS, GAME_ID_STATUS, PUT_FLAG, PUT_NUMBER, REMOVE_FLAG_SUCCESS, NOTHING } from '../constants/actionTypes';\nimport { COVERED_COLOR, DISCOVERED_COLOR, BOMB_EXPLOSION_COLOR } from '../constants/colors';\nexport function startGameBoard() {\n  var boardWithMines = loadGame();\n  var data = {\n    board: boardWithMines,\n    game_status: 3,\n    board_status: startBoard(),\n    flipped_boxes: 0\n  };\n  fetch('/game/start', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    if (data.message == \"Guardado\") {\n      var boardStatus = data.board_status;\n      paintFlagsAndNumbers(boardStatus);\n    } else {\n      if (data.message == \"Nuevo\") {\n        startGameExit(data);\n      } else {\n        if (data.message == \"GameOver\") {\n          var _boardStatus = data.board_status;\n          paintFlagsAndNumbers(_boardStatus);\n          alert(\"JUEGO PERDIDO\");\n        } else {\n          if (data.message == \"YouWin\") {\n            var _boardStatus2 = data.board_status;\n            paintFlagsAndNumbers(_boardStatus2);\n            alert(\"JUEGO GANADO\");\n          }\n        }\n      }\n    }\n  })[\"catch\"](function (error) {\n    return console.log('error', error);\n  });\n}\n\nfunction paintFlagsAndNumbers(boardStatus) {\n  for (var row = 0; row < 10; row++) {\n    for (var column = 0; column < 10; column++) {\n      if (boardStatus[row][column] == 2) {\n        $(\".flag.\".concat(row).concat(column)).show();\n        $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n      } else {\n        if (boardStatus[row][column] == 1) {\n          var data = {\n            coordinates: [row, column]\n          };\n          fetch('/game/get/number', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            var currentBoard = data.board;\n            var row = data.coordinates[0];\n            var column = data.coordinates[1];\n            var paintNumber = currentBoard[row][column];\n\n            switch (paintNumber) {\n              case 0:\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 1:\n                $(\".one.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 2:\n                $(\".two.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 3:\n                $(\".three.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 4:\n                $(\".four.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 5:\n                $(\".five.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 6:\n                $(\".six.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 7:\n                $(\".seven.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 8:\n                $(\".eight.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', DISCOVERED_COLOR);\n                break;\n\n              case 9:\n                $(\".bomb.\".concat(row).concat(column)).show();\n                break;\n\n              case 10:\n                $(\".fire.\".concat(row).concat(column)).show();\n                $(\".cell.\".concat(row).concat(column)).css('background', BOMB_EXPLOSION_COLOR);\n                break;\n            }\n          })[\"catch\"](function (error) {\n            return console.log('error', error);\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    type: LOAD_GAME_SUCCESS\n  };\n}\n\nfunction startGameExit(data) {\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  $(\".cell\").css('background', COVERED_COLOR);\n  $(\".flag\").hide();\n  $(\".fire\").hide();\n  $(\".bomb\").hide();\n  $(\".one\").hide();\n  $(\".two\").hide();\n  $(\".three\").hide();\n  $(\".four\").hide();\n  $(\".five\").hide();\n  $(\".six\").hide();\n  $(\".seven\").hide();\n  $(\".eight\").hide();\n  var boardWithMines = loadGame();\n  return function (dispatch) {\n    var data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    };\n    fetch('/game/restart', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      dispatch(restartGameSuccess(data));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction restartGameSuccess(data) {\n  return {\n    type: RESTAR_GAME_SUCCESS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status,\n    flippedBoxes: data.flipped_boxes\n  };\n}\n\nexport function getStateForFlagCell(coordinates, decideAboutFlag, cell, props) {\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var cellStatus = data.cell_status;\n      var gameOverAlert = 0;\n\n      if (data.game_over_alert == 1) {\n        gameOverAlert = 1;\n      }\n\n      decideAboutFlag(cell, cellStatus, props, gameOverAlert);\n      dispatch(flagSuccess(cellStatus));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction flagSuccess(cellStatus) {\n  return {\n    type: CELL_STATUS_SUCCESS,\n    cellStatus: cellStatus\n  };\n}\n\nexport function getCellState(coordinates, decideAboutNumberOrBomb, cell, props) {\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/get/cellStatus', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var cellStatus = data.cell_status;\n      var flagAlert = data.flag_alert;\n      var zerosCoordinates = 0;\n      var numbersCoordinates = 0;\n      var bombsCoordinates = 0;\n      var gameStatus = data.game_status;\n\n      if (data.zero_alert == 1) {\n        zerosCoordinates = data.zeros_coordinates_to_uncover;\n        numbersCoordinates = data.numbers_coordinates_to_uncover;\n      }\n\n      if (data.bomb_alert == 1) {\n        bombsCoordinates = data.bombs_coordinates;\n      }\n\n      decideAboutNumberOrBomb(cell, cellStatus, props, flagAlert, zerosCoordinates, numbersCoordinates, bombsCoordinates, gameStatus);\n      dispatch(getCellStateSuccess(data));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction getCellStateSuccess(data) {\n  return {\n    type: CELL_STATUS_SUCCESS,\n    cellStatus: data.cell_status,\n    flippedBoxes: data.flipped_boxes,\n    gameStatus: data.game_status\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    return function (dispatch) {\n      fetch('/game/get/id').then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        dispatch(gameIdSuccess(data));\n      })[\"catch\"](function (error) {\n        return console.log('error', error);\n      });\n    };\n  }\n\n  return {\n    type: NOTHING\n  };\n}\n\nfunction gameIdSuccess(data) {\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status,\n    flippedBoxes: data.flipped_boxes\n  };\n}\n\nexport function getStatusGame(props) {\n  return {\n    type: GAME_STATUS_SUCCESS,\n    data: props\n  };\n}\nexport function setBoardFlag(gameId, coordinates) {\n  return function (dispatch) {\n    var data = {\n      gameId: gameId,\n      coordinates: coordinates\n    };\n    fetch('/game/push/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      dispatch(setBoardFlagSuccess(data.game_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction setBoardFlagSuccess(gameStatus) {\n  return {\n    type: PUT_FLAG,\n    gameStatus: gameStatus\n  };\n}\n\nexport function setBoardNumber(gameId, coordinates, number) {\n  return function (dispatch) {\n    var data = {\n      gameId: gameId,\n      coordinates: coordinates,\n      number: number\n    };\n    fetch('/game/push/Number', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      dispatch(setBoardNumberSuccess(data.game_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction setBoardNumberSuccess(gameStatus) {\n  return {\n    type: PUT_NUMBER,\n    gameStatus: gameStatus\n  };\n}\n\nexport function removeBoardFlag(gameId, coordinates) {\n  return function (dispatch) {\n    var data = {\n      gameId: gameId,\n      coordinates: coordinates\n    };\n    fetch('/game/remove/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      dispatch(removeBoardFlagSuccess(data.game_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction removeBoardFlagSuccess() {\n  return {\n    type: REMOVE_FLAG_SUCCESS\n  };\n}","map":{"version":3,"sources":["/home/valter/Documents/HOMIE/PROYECTO/Proyect/Search-Mines/app/javascript/src/actions/actions.js"],"names":["loadGame","startBoard","START_GAME_SUCCESS","RESTAR_GAME_SUCCESS","CELL_STATUS_SUCCESS","GAME_STATUS_SUCCESS","LOAD_GAME_SUCCESS","GAME_ID_STATUS","PUT_FLAG","PUT_NUMBER","REMOVE_FLAG_SUCCESS","NOTHING","COVERED_COLOR","DISCOVERED_COLOR","BOMB_EXPLOSION_COLOR","startGameBoard","boardWithMines","data","board","game_status","board_status","flipped_boxes","fetch","method","body","JSON","stringify","headers","then","response","json","message","boardStatus","paintFlagsAndNumbers","startGameExit","alert","error","console","log","row","column","$","show","css","coordinates","currentBoard","paintNumber","type","trash","restartGame","hide","dispatch","restartGameSuccess","gameId","game_id","$oid","gameStatus","flippedBoxes","getStateForFlagCell","decideAboutFlag","cell","props","cellStatus","cell_status","gameOverAlert","game_over_alert","flagSuccess","getCellState","decideAboutNumberOrBomb","flagAlert","flag_alert","zerosCoordinates","numbersCoordinates","bombsCoordinates","zero_alert","zeros_coordinates_to_uncover","numbers_coordinates_to_uncover","bomb_alert","bombs_coordinates","getCellStateSuccess","knowTheGameState","gameIdSuccess","getStatusGame","setBoardFlag","setBoardFlagSuccess","setBoardNumber","number","setBoardNumberSuccess","removeBoardFlag","removeBoardFlagSuccess"],"mappings":"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","sourcesContent":["import { loadGame, startBoard } from '../api/gameApi';\nimport {\n  START_GAME_SUCCESS,\n  RESTAR_GAME_SUCCESS,\n  CELL_STATUS_SUCCESS,\n  GAME_STATUS_SUCCESS,\n  LOAD_GAME_SUCCESS,\n  GAME_ID_STATUS,\n  PUT_FLAG,\n  PUT_NUMBER,\n  REMOVE_FLAG_SUCCESS,\n  NOTHING\n} from '../constants/actionTypes';\nimport {\n  COVERED_COLOR,\n  DISCOVERED_COLOR,\n  BOMB_EXPLOSION_COLOR\n  } from '../constants/colors';\n\nexport function startGameBoard() {\n  let boardWithMines = loadGame()\n    let data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/start', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.message == \"Guardado\") {\n        let boardStatus = data.board_status\n        paintFlagsAndNumbers(boardStatus)\n      } else {\n        if (data.message == \"Nuevo\") {\n          startGameExit(data);\n        } else {\n          if (data.message == \"GameOver\") {\n            let boardStatus = data.board_status\n            paintFlagsAndNumbers(boardStatus)\n            alert(\"JUEGO PERDIDO\")\n          } else {\n            if (data.message == \"YouWin\") {\n            let boardStatus = data.board_status\n            paintFlagsAndNumbers(boardStatus)\n            alert(\"JUEGO GANADO\")\n            }\n          }\n        }\n      } \n    })\n    .catch(error => console.log('error', error));\n}\n\nfunction paintFlagsAndNumbers(boardStatus) {\n  for (let row = 0; row < 10; row++) {\n    for (let column = 0; column < 10; column++) {\n      if (boardStatus[row][column] == 2) {\n        $(`.flag.${row}${column}`).show()\n        $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n      } else {\n        if (boardStatus[row][column] == 1) {\n          let data = {\n            coordinates: [row, column]\n          }\n          fetch('/game/get/number', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {'Content-Type': 'application/json' }\n          })\n          .then(response => response.json())\n          .then(data => {\n            let currentBoard = data.board;\n            let row = data.coordinates[0]\n            let column = data.coordinates[1]\n            let paintNumber = currentBoard[row][column];\n            switch(paintNumber){\n              case 0:\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 1:\n                $(`.one.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 2:\n                $(`.two.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 3:\n                $(`.three.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 4:\n                $(`.four.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 5:\n                $(`.five.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 6:\n                $(`.six.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 7:\n                $(`.seven.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 8:\n                $(`.eight.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', DISCOVERED_COLOR);\n                break\n              case 9:\n                $(`.bomb.${row}${column}`).show()\n                break\n              case 10:\n                $(`.fire.${row}${column}`).show()\n                $(`.cell.${row}${column}`).css('background', BOMB_EXPLOSION_COLOR);\n                break\n\n            }\n          })\n          .catch(error => console.log('error', error));\n        }\n      }\n    }\n  }\n  return {\n    type: LOAD_GAME_SUCCESS\n  }\n}\n\nfunction startGameExit(data) {\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  $(`.cell`).css('background', COVERED_COLOR);\n  $(`.flag`).hide();\n  $(`.fire`).hide();\n  $(`.bomb`).hide();\n  $(`.one`).hide();\n  $(`.two`).hide();\n  $(`.three`).hide();\n  $(`.four`).hide();\n  $(`.five`).hide();\n  $(`.six`).hide();\n  $(`.seven`).hide();\n  $(`.eight`).hide();\n  let boardWithMines = loadGame()\n  return function(dispatch) {\n    let data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/restart', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      dispatch(restartGameSuccess(data));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction restartGameSuccess(data) {\n  return {\n    type: RESTAR_GAME_SUCCESS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status,\n    flippedBoxes: data.flipped_boxes\n  }\n}\n\nexport function getStateForFlagCell(coordinates, decideAboutFlag, cell, props) {\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      let cellStatus = data.cell_status\n      let gameOverAlert = 0\n      if (data.game_over_alert == 1) {\n        gameOverAlert = 1\n      }\n      decideAboutFlag(cell, cellStatus, props, gameOverAlert)\n      dispatch(flagSuccess(cellStatus));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction flagSuccess(cellStatus) {\n  return {\n    type: CELL_STATUS_SUCCESS,\n    cellStatus: cellStatus\n  };\n}\n\nexport function getCellState(coordinates, decideAboutNumberOrBomb, cell, props) {\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/get/cellStatus', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      let cellStatus = data.cell_status\n      let flagAlert = data.flag_alert\n      let zerosCoordinates = 0\n      let numbersCoordinates = 0\n      let bombsCoordinates = 0\n      let gameStatus = data.game_status\n      if (data.zero_alert == 1) {\n        zerosCoordinates = data.zeros_coordinates_to_uncover\n        numbersCoordinates = data.numbers_coordinates_to_uncover\n      }\n      if (data.bomb_alert == 1) {\n        bombsCoordinates = data.bombs_coordinates\n      }\n      decideAboutNumberOrBomb(cell, cellStatus, props, flagAlert, zerosCoordinates, numbersCoordinates, bombsCoordinates, gameStatus)\n      dispatch(getCellStateSuccess(data));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction getCellStateSuccess(data) {\n  return {\n    type: CELL_STATUS_SUCCESS,\n    cellStatus: data.cell_status,\n    flippedBoxes: data.flipped_boxes,\n    gameStatus: data.game_status\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    return function(dispatch) {\n      fetch('/game/get/id')\n      .then(response => response.json())\n      .then(data =>{\n        dispatch(gameIdSuccess(data));\n      })\n      .catch(error => console.log('error', error));\n    }\n\n  }\n  return {\n    type: NOTHING\n  }\n}\n\nfunction gameIdSuccess(data) {\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status,\n    flippedBoxes: data.flipped_boxes\n  }\n}\n\nexport function getStatusGame (props) {\n  return {\n    type: GAME_STATUS_SUCCESS,\n    data: props\n  }\n}\n\nexport function setBoardFlag (gameId, coordinates) {\n  return function(dispatch) {\n    let data = {\n      gameId: gameId,\n      coordinates: coordinates\n    }\n    fetch('/game/push/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      dispatch(setBoardFlagSuccess(data.game_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction setBoardFlagSuccess (gameStatus) {\n  return {\n    type: PUT_FLAG,\n    gameStatus: gameStatus\n  }\n}\n\nexport function setBoardNumber (gameId, coordinates, number) {\n  return function(dispatch) {\n    let data = {\n      gameId: gameId,\n      coordinates: coordinates,\n      number: number\n    }\n    fetch('/game/push/Number', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      dispatch(setBoardNumberSuccess(data.game_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction setBoardNumberSuccess (gameStatus) {\n  return {\n    type: PUT_NUMBER,\n    gameStatus: gameStatus\n  }\n}\n\nexport function removeBoardFlag (gameId, coordinates) {\n  return function(dispatch) {\n    let data = {\n      gameId: gameId,\n      coordinates: coordinates\n    }\n    fetch('/game/remove/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      dispatch(removeBoardFlagSuccess(data.game_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction removeBoardFlagSuccess () {\n  return {\n    type: REMOVE_FLAG_SUCCESS\n  }\n}"]},"metadata":{},"sourceType":"module"}