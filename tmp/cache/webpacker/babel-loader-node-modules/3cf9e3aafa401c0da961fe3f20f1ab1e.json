{"ast":null,"code":"import { loadGame, startBoard } from '../api/gameApi';\nimport { START_GAME_SUCCESS, RESTAR_GAME_SUCCESS, CELL_STATUS, GAME_STATUS_SUCCESS, GAME_STATUS, GAME_ID_STATUS, PUT_FLAG, UPDATE_GAME, FLIP_CELL, LOAD_BOARD_SUCCESS, NOTHING } from '../constants/actionTypes'; //export function startGameBoardZZ() {\n//console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n//return (startGameSuccess(loadGame()));\n//}\n//export function startGameSuccess() {\n\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\"); //console.log(props)\n\n  var boardWithMines = loadGame();\n  console.log(boardWithMines);\n  console.log(\"listo\"); //return function(dispatch) {\n\n  console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\");\n  var data = {\n    board: boardWithMines,\n    game_status: 3,\n    board_status: startBoard(),\n    flipped_boxes: 0\n  };\n  fetch('/game/start', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log(\"respuesta del controlador start_game:\"); //si recibo data.message == \"Nuevo\", continua el flujo normal\n    //pero si recibo data.message == \"Guardado\"\n    //debo utilizar la respuesta para pintar las banderas\n\n    $(\".prueba-componente\").css('background', '#1636ad');\n    console.log(data);\n    startGameExit(data);\n  })[\"catch\"](function (error) {\n    return console.log('error', error);\n  }); //}\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\");\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  console.log(\"Estamos en la funcion restartGame\");\n  var boardWithMines = loadGame();\n  console.log(boardWithMines);\n  console.log(\"listo\");\n  return function (dispatch) {\n    console.log(\"despachamos la funcion que ejecutara el fetch\");\n    var data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    };\n    fetch('/game/restart', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"respuesta del controlador reset_game:\");\n      console.log(data);\n      dispatch(restartGameSuccess(data));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction restartGameSuccess(data) {\n  return {\n    type: RESTAR_GAME_SUCCESS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  };\n}\n\nexport function switchFlag(coordinates, validateCellStatus, cell, props) {\n  console.log(\"estamos en la funcion switchFlag\");\n  console.log(coordinates);\n  console.log(validateCellStatus);\n  console.log(cell);\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      validateCellStatus(cell, data, props);\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"Estamos en un juego nuevo, obtener el Id para ir guardando los cambios\");\n    return function (dispatch) {\n      fetch('/game/get/id').then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n        dispatch(gameIdSuccess(data));\n      });\n    };\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\");\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\");\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\");\n        }\n      }\n    }\n  }\n\n  return {\n    type: NOTHING\n  };\n}\n\nfunction gameIdSuccess(data) {\n  console.log(\"llegamos a GAMEIDSUCCESS\");\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  };\n}\n\nexport function getStatusGame(props) {\n  console.log(\"Estamos en la funcion getStatusGame\");\n  console.log(props);\n  return {\n    type: GAME_STATUS_SUCCESS,\n    data: props //AUN NO SE HA ESCRITO LA RESPUESTA EN STATES.JS\n\n  };\n}\nexport function markTheBoard(gameId, coordinates) {\n  console.log(\"llegamos a markTheBoard\");\n  return function (dispatch) {\n    var data = {\n      gameId: gameId,\n      coordinates: coordinates\n    };\n    fetch('/game/push/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(data);\n      console.log(data.game_status);\n      dispatch(markBoardSuccess(data.game_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction markBoardSuccess(gameStatus) {\n  console.log(\"llegamos a markBoardSuccess\");\n  return {\n    type: PUT_FLAG,\n    gameStatus: gameStatus\n  };\n}","map":{"version":3,"sources":["/home/valter/Documents/HOMIE/PROYECTO/Proyect/search-mines/app/javascript/src/actions/actions.js"],"names":["loadGame","startBoard","START_GAME_SUCCESS","RESTAR_GAME_SUCCESS","CELL_STATUS","GAME_STATUS_SUCCESS","GAME_STATUS","GAME_ID_STATUS","PUT_FLAG","UPDATE_GAME","FLIP_CELL","LOAD_BOARD_SUCCESS","NOTHING","startGameBoard","console","log","boardWithMines","data","board","game_status","board_status","flipped_boxes","fetch","method","body","JSON","stringify","headers","then","response","json","$","css","startGameExit","error","type","trash","restartGame","dispatch","restartGameSuccess","gameId","game_id","$oid","gameStatus","switchFlag","coordinates","validateCellStatus","cell","props","cell_status","flagSuccess","cellStatus","knowTheGameState","gameIdSuccess","getStatusGame","markTheBoard","markBoardSuccess"],"mappings":"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","sourcesContent":["import { loadGame, startBoard } from '../api/gameApi';\nimport {\n  START_GAME_SUCCESS,\n  RESTAR_GAME_SUCCESS,\n  CELL_STATUS,\n  GAME_STATUS_SUCCESS,\n  GAME_STATUS,\n  GAME_ID_STATUS,\n  PUT_FLAG,\n  UPDATE_GAME,\n  FLIP_CELL,\n  LOAD_BOARD_SUCCESS,\n  NOTHING\n} from '../constants/actionTypes';\n\n//export function startGameBoardZZ() {\n  //console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n  //return (startGameSuccess(loadGame()));\n//}\n\n//export function startGameSuccess() {\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\")\n  //console.log(props)\n  var boardWithMines = loadGame()\n  console.log(boardWithMines);\n  console.log(\"listo\")\n  //return function(dispatch) {\n    console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\")\n    let data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/start', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del controlador start_game:\");\n      //si recibo data.message == \"Nuevo\", continua el flujo normal\n      //pero si recibo data.message == \"Guardado\"\n      //debo utilizar la respuesta para pintar las banderas\n      $(`.prueba-componente`).css('background', '#1636ad');\n      console.log(data);\n      startGameExit(data);\n    })\n    .catch(error => console.log('error', error));\n  //}\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\")\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  console.log(\"Estamos en la funcion restartGame\")\n  var boardWithMines = loadGame()\n  console.log(boardWithMines);\n  console.log(\"listo\")\n  return function(dispatch) {\n    console.log(\"despachamos la funcion que ejecutara el fetch\")\n    let data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/restart', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del controlador reset_game:\");\n      console.log(data);\n      dispatch(restartGameSuccess(data));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction restartGameSuccess(data) {\n  return {\n    type: RESTAR_GAME_SUCCESS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  }\n}\n\nexport function switchFlag(coordinates, validateCellStatus, cell, props) {\n  console.log(\"estamos en la funcion switchFlag\");\n  console.log(coordinates)\n  console.log(validateCellStatus)\n  console.log(cell)\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      validateCellStatus(cell, data, props)\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"Estamos en un juego nuevo, obtener el Id para ir guardando los cambios\")\n    return function(dispatch) {\n      fetch('/game/get/id')\n      .then(response => response.json())\n      .then(data =>{\n        console.log(data);\n        dispatch(gameIdSuccess(data));\n      });\n    }\n\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\")\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\")\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\")\n        }\n      }\n    }\n  }\n  return {\n    type: NOTHING\n  }\n}\n\nfunction gameIdSuccess(data) {\n  console.log(\"llegamos a GAMEIDSUCCESS\")\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  }\n}\n\nexport function getStatusGame (props) {\n  console.log(\"Estamos en la funcion getStatusGame\")\n  console.log(props)\n  return {\n    type: GAME_STATUS_SUCCESS,\n    data: props   //AUN NO SE HA ESCRITO LA RESPUESTA EN STATES.JS\n  }\n}\n\nexport function markTheBoard (gameId, coordinates) {\n  console.log(\"llegamos a markTheBoard\")\n  return function(dispatch) {\n    let data = {\n      gameId: gameId,\n      coordinates: coordinates\n    }\n    fetch('/game/push/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(data)\n      console.log(data.game_status);\n      dispatch(markBoardSuccess(data.game_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction markBoardSuccess (gameStatus) {\n  console.log(\"llegamos a markBoardSuccess\")\n  return {\n    type: PUT_FLAG,\n    gameStatus: gameStatus\n  }\n}"]},"metadata":{},"sourceType":"module"}