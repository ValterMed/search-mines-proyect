{"ast":null,"code":"import { loadGame, startBoard } from '../api/gameApi';\nimport customFlag from '../../../assets/images/flag';\nimport fire from '../../../assets/images/fire';\nimport bombs from '../../../assets/images/bomb';\nimport one from '../../../assets/images/one';\nimport two from '../../../assets/images/two';\nimport three from '../../../assets/images/three';\nimport four from '../../../assets/images/four';\nimport five from '../../../assets/images/five';\nimport six from '../../../assets/images/six';\nimport seven from '../../../assets/images/seven';\nimport eight from '../../../assets/images/eight';\nimport { START_GAME_SUCCESS, RESTAR_GAME_SUCCESS, CELL_STATUS_SUCCESS, GAME_STATUS_SUCCESS, LOAD_GAME_SUCCESS, GAME_STATUS, GAME_ID_STATUS, PUT_FLAG, REMOVE_FLAG_SUCCESS, UPDATE_GAME, FLIP_CELL, LOAD_BOARD_SUCCESS, NOTHING } from '../constants/actionTypes'; //export function startGameBoardZZ() {\n//console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n//return (startGameSuccess(loadGame()));\n//}\n//export function startGameSuccess() {\n\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\"); //console.log(props)\n\n  var boardWithMines = loadGame();\n  console.log(boardWithMines);\n  console.log(\"listo\"); //return function(dispatch) {\n\n  console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\");\n  var data = {\n    board: boardWithMines,\n    game_status: 3,\n    board_status: startBoard(),\n    flipped_boxes: 0\n  };\n  fetch('/game/start', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log(\"respuesta del controlador start_game:\");\n    console.log(data); //si recibo data.message == \"Nuevo\", continua el flujo normal\n    //pero si recibo data.message == \"Guardado\"\n    //debo utilizar la respuesta para pintar las banderas\n\n    if (data.message == \"Guardado\") {\n      console.log(\"vamos a recuperar las banderas\");\n      $(\".prueba-componente\").css('background', '#980f8c');\n      var boardStatus = data.board_status;\n      paintFlags(boardStatus);\n    } else {\n      if (data.message == \"Nuevo\") {\n        $(\".prueba-componente\").css('background', '#054bd8');\n        startGameExit(data);\n      }\n    } //startGameExit(data);\n\n  })[\"catch\"](function (error) {\n    return console.log('error', error);\n  }); //}\n}\n\nfunction paintFlags(boardStatus) {\n  console.log(\"Estamos en la funcion que buscara las posicones para colocar banderas\"); //buscar todas las posiciones con bandera y dibujarlas en la pagina\n\n  for (var row = 0; row < 10; row++) {\n    for (var column = 0; column < 10; column++) {\n      if (boardStatus[row][column] == 2) {\n        //colocar una bandera en esa posicion\n        console.log(\"Existe una bandera en la posicion row=\".concat(row, \" column=\").concat(column)); //var image = new Image(); //AQUI ESTA EL PROBLEMA, CARGA IMAGENES NUEVAS SIN CLASE AL RECUPERARLAS!!\n        //image.src= \"packs/media/images/flag-8654d5a5.png\"\n        //image.src = customFlag\n\n        console.log(\".cell.\".concat(row).concat(column));\n        $(\".flag.\".concat(row).concat(column)).show();\n        $(\".cell.\".concat(row).concat(column)).css('background', '#1636ad'); //color azul #1636ad\n      }\n    }\n  }\n\n  return {\n    type: LOAD_GAME_SUCCESS\n  };\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\");\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  console.log(\"Estamos en la funcion restartGame\");\n  $(\".cell\").css('background', '#7f7e7e');\n  $(\".flag\").hide();\n  var boardWithMines = loadGame();\n  console.log(boardWithMines);\n  console.log(\"listo\");\n  return function (dispatch) {\n    console.log(\"despachamos la funcion que ejecutara el fetch\");\n    var data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    };\n    fetch('/game/restart', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"respuesta del controlador reset_game:\");\n      console.log(data);\n      dispatch(restartGameSuccess(data));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction restartGameSuccess(data) {\n  return {\n    type: RESTAR_GAME_SUCCESS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  };\n}\n\nexport function getStateForFlagCell(coordinates, validateCellStatus, cell, props) {\n  console.log(\"estamos en la funcion getStateForFlagCell\");\n  console.log(coordinates);\n  console.log(validateCellStatus);\n  console.log(cell);\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var cellStatus = data.cell_status;\n      validateCellStatus(cell, cellStatus, props);\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function getCellState(coordinates, decideAboutNumberOrBomb, cell, props) {\n  console.log(\"estamos en la funcion getStateForFlagCell\");\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/get/cellStatus', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      decideAboutNumberOrBomb(cell, data, props);\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(data.cell_status);\n      dispatch(getCellStateSuccess(data.cell_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction getCellStateSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS_SUCCESS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"Estamos en un juego nuevo, obtener el Id para ir guardando los cambios\");\n    return function (dispatch) {\n      fetch('/game/get/id').then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n        dispatch(gameIdSuccess(data));\n      });\n    };\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\");\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\");\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\");\n        }\n      }\n    }\n  }\n\n  return {\n    type: NOTHING\n  };\n}\n\nfunction gameIdSuccess(data) {\n  console.log(\"llegamos a GAMEIDSUCCESS\");\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  };\n}\n\nexport function getStatusGame(props) {\n  console.log(\"Estamos en la funcion getStatusGame\");\n  console.log(props);\n  return {\n    type: GAME_STATUS_SUCCESS,\n    data: props //AUN NO SE HA ESCRITO LA RESPUESTA EN STATES.JS\n\n  };\n}\nexport function setBoardFlag(gameId, coordinates) {\n  console.log(\"llegamos a setBoardFlag\");\n  return function (dispatch) {\n    var data = {\n      gameId: gameId,\n      coordinates: coordinates\n    };\n    fetch('/game/push/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(data);\n      console.log(data.game_status);\n      dispatch(setBoardFlagSuccess(data.game_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction setBoardFlagSuccess(gameStatus) {\n  console.log(\"llegamos a markBoardSuccess\");\n  return {\n    type: PUT_FLAG,\n    gameStatus: gameStatus\n  };\n}\n\nexport function removeBoardFlag(gameId, coordinates) {\n  console.log(\"llegamos a removeBoardFlag\");\n  return function (dispatch) {\n    var data = {\n      gameId: gameId,\n      coordinates: coordinates\n    };\n    fetch('/game/remove/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"respuesta del estado de la celda:\"); //la bandera se elimino\n\n      console.log(data);\n      dispatch(removeBoardFlagSuccess(data.game_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction removeBoardFlagSuccess() {\n  console.log(\"llegamos a la funcion removeBoardFlagSuccess\");\n  return {\n    type: REMOVE_FLAG_SUCCESS\n  };\n}","map":{"version":3,"sources":["/home/valter/Documents/HOMIE/PROYECTO/Proyect/search-mines/app/javascript/src/actions/actions.js"],"names":["loadGame","startBoard","customFlag","fire","bombs","one","two","three","four","five","six","seven","eight","START_GAME_SUCCESS","RESTAR_GAME_SUCCESS","CELL_STATUS_SUCCESS","GAME_STATUS_SUCCESS","LOAD_GAME_SUCCESS","GAME_STATUS","GAME_ID_STATUS","PUT_FLAG","REMOVE_FLAG_SUCCESS","UPDATE_GAME","FLIP_CELL","LOAD_BOARD_SUCCESS","NOTHING","startGameBoard","console","log","boardWithMines","data","board","game_status","board_status","flipped_boxes","fetch","method","body","JSON","stringify","headers","then","response","json","message","$","css","boardStatus","paintFlags","startGameExit","error","row","column","show","type","trash","restartGame","hide","dispatch","restartGameSuccess","gameId","game_id","$oid","gameStatus","getStateForFlagCell","coordinates","validateCellStatus","cell","props","cellStatus","cell_status","flagSuccess","CELL_STATUS","getCellState","decideAboutNumberOrBomb","getCellStateSuccess","knowTheGameState","gameIdSuccess","getStatusGame","setBoardFlag","setBoardFlagSuccess","removeBoardFlag","removeBoardFlagSuccess"],"mappings":"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","sourcesContent":["import { loadGame, startBoard } from '../api/gameApi';\nimport customFlag from '../../../assets/images/flag';\nimport fire from '../../../assets/images/fire';\nimport bombs from '../../../assets/images/bomb';\nimport one from '../../../assets/images/one';\nimport two from '../../../assets/images/two';\nimport three from '../../../assets/images/three';\nimport four from '../../../assets/images/four';\nimport five from '../../../assets/images/five';\nimport six from '../../../assets/images/six';\nimport seven from '../../../assets/images/seven';\nimport eight from '../../../assets/images/eight';\nimport {\n  START_GAME_SUCCESS,\n  RESTAR_GAME_SUCCESS,\n  CELL_STATUS_SUCCESS,\n  GAME_STATUS_SUCCESS,\n  LOAD_GAME_SUCCESS,\n  GAME_STATUS,\n  GAME_ID_STATUS,\n  PUT_FLAG,\n  REMOVE_FLAG_SUCCESS,\n  UPDATE_GAME,\n  FLIP_CELL,\n  LOAD_BOARD_SUCCESS,\n  NOTHING\n} from '../constants/actionTypes';\n\n//export function startGameBoardZZ() {\n  //console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n  //return (startGameSuccess(loadGame()));\n//}\n\n//export function startGameSuccess() {\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\")\n  //console.log(props)\n  var boardWithMines = loadGame()\n  console.log(boardWithMines);\n  console.log(\"listo\")\n  //return function(dispatch) {\n    console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\")\n    let data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/start', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del controlador start_game:\");\n      console.log(data);\n      //si recibo data.message == \"Nuevo\", continua el flujo normal\n      //pero si recibo data.message == \"Guardado\"\n      //debo utilizar la respuesta para pintar las banderas\n      if (data.message == \"Guardado\") {\n        console.log(\"vamos a recuperar las banderas\");\n        $(`.prueba-componente`).css('background', '#980f8c');\n        var boardStatus = data.board_status\n        paintFlags(boardStatus)\n      } else {\n        if (data.message == \"Nuevo\") {\n          $(`.prueba-componente`).css('background', '#054bd8');\n          startGameExit(data);\n        }\n      }\n      //startGameExit(data);\n    })\n    .catch(error => console.log('error', error));\n  //}\n}\n\nfunction paintFlags(boardStatus) {\n  console.log(\"Estamos en la funcion que buscara las posicones para colocar banderas\")\n  //buscar todas las posiciones con bandera y dibujarlas en la pagina\n  for (var row = 0; row < 10; row++) {\n    for (var column = 0; column < 10; column++) {\n      if (boardStatus[row][column] == 2) {\n        //colocar una bandera en esa posicion\n        console.log(`Existe una bandera en la posicion row=${row} column=${column}`)\n        //var image = new Image(); //AQUI ESTA EL PROBLEMA, CARGA IMAGENES NUEVAS SIN CLASE AL RECUPERARLAS!!\n        //image.src= \"packs/media/images/flag-8654d5a5.png\"\n        //image.src = customFlag\n        console.log(`.cell.${row}${column}`)\n        $(`.flag.${row}${column}`).show()\n        $(`.cell.${row}${column}`).css('background', '#1636ad'); //color azul #1636ad\n      }\n    }\n  }\n  return {\n    type: LOAD_GAME_SUCCESS\n  }\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\")\n  return {\n    type: START_GAME_SUCCESS,\n    trash: data\n  };\n}\n\nexport function restartGame() {\n  console.log(\"Estamos en la funcion restartGame\")\n  $(`.cell`).css('background', '#7f7e7e');\n  $(`.flag`).hide();\n  var boardWithMines = loadGame()\n  console.log(boardWithMines);\n  console.log(\"listo\")\n  return function(dispatch) {\n    console.log(\"despachamos la funcion que ejecutara el fetch\")\n    let data = {\n      board: boardWithMines,\n      game_status: 3,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/restart', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del controlador reset_game:\");\n      console.log(data);\n      dispatch(restartGameSuccess(data));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction restartGameSuccess(data) {\n  return {\n    type: RESTAR_GAME_SUCCESS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  }\n}\n\nexport function getStateForFlagCell(coordinates, validateCellStatus, cell, props) {\n  console.log(\"estamos en la funcion getStateForFlagCell\");\n  console.log(coordinates)\n  console.log(validateCellStatus)\n  console.log(cell)\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      let cellStatus = data.cell_status\n      validateCellStatus(cell, cellStatus, props)\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function getCellState(coordinates, decideAboutNumberOrBomb, cell, props) {\n  console.log(\"estamos en la funcion getStateForFlagCell\");\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/get/cellStatus', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      decideAboutNumberOrBomb(cell, data, props)\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(data.cell_status);\n      dispatch(getCellStateSuccess(data.cell_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction getCellStateSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS_SUCCESS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"Estamos en un juego nuevo, obtener el Id para ir guardando los cambios\")\n    return function(dispatch) {\n      fetch('/game/get/id')\n      .then(response => response.json())\n      .then(data =>{\n        console.log(data);\n        dispatch(gameIdSuccess(data));\n      });\n    }\n\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\")\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\")\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\")\n        }\n      }\n    }\n  }\n  return {\n    type: NOTHING\n  }\n}\n\nfunction gameIdSuccess(data) {\n  console.log(\"llegamos a GAMEIDSUCCESS\")\n  return {\n    type: GAME_ID_STATUS,\n    gameId: data.game_id.$oid,\n    gameStatus: data.game_status\n  }\n}\n\nexport function getStatusGame (props) {\n  console.log(\"Estamos en la funcion getStatusGame\")\n  console.log(props)\n  return {\n    type: GAME_STATUS_SUCCESS,\n    data: props   //AUN NO SE HA ESCRITO LA RESPUESTA EN STATES.JS\n  }\n}\n\nexport function setBoardFlag (gameId, coordinates) {\n  console.log(\"llegamos a setBoardFlag\")\n  return function(dispatch) {\n    let data = {\n      gameId: gameId,\n      coordinates: coordinates\n    }\n    fetch('/game/push/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(data)\n      console.log(data.game_status);\n      dispatch(setBoardFlagSuccess(data.game_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction setBoardFlagSuccess (gameStatus) {\n  console.log(\"llegamos a markBoardSuccess\")\n  return {\n    type: PUT_FLAG,\n    gameStatus: gameStatus\n  }\n}\n\nexport function removeBoardFlag (gameId, coordinates) {\n  console.log(\"llegamos a removeBoardFlag\")\n  return function(dispatch) {\n    let data = {\n      gameId: gameId,\n      coordinates: coordinates\n    }\n    fetch('/game/remove/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del estado de la celda:\") //la bandera se elimino\n      console.log(data)\n      dispatch(removeBoardFlagSuccess(data.game_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction removeBoardFlagSuccess () {\n  console.log(\"llegamos a la funcion removeBoardFlagSuccess\")\n  return {\n    type: REMOVE_FLAG_SUCCESS\n  }\n}"]},"metadata":{},"sourceType":"module"}