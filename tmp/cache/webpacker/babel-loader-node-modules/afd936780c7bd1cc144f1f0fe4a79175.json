{"ast":null,"code":"import { loadGame, startBoard } from '../api/gameApi';\nimport { START_GAME_SUCCESS, RESET_GAME, CELL_STATUS, GAME_STATUS, UPDATE_GAME, FLIP_CELL, LOAD_BOARD_SUCCESS } from '../constants/actionTypes';\nexport function startGameBoardZZ() {\n  //console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n  return startGameSuccess(loadGame());\n} //export function startGameSuccess() {\n\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\"); //console.log(props)\n\n  var boardWithMines = loadGame();\n  console.log(boardWithMines);\n  console.log(\"listo\");\n  return function (dispatch) {\n    console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\");\n    var data = {\n      board: boardWithMines,\n      game_status: 0,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    };\n    fetch('/game/start', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"respuesta del controlador con el ID:\");\n      console.log(data);\n      console.log(data.game_id);\n      console.log(data.game_id.$oid);\n      dispatch(startGameExit(data));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\");\n  return {\n    type: START_GAME_SUCCESS,\n    gameId: data\n  };\n}\n\nexport function restartGame() {\n  startGameBoard();\n}\nexport function switchFlag(coordinates, myFunction, celda) {\n  console.log(\"estamos en la funcion switchFlag\");\n  console.log(coordinates);\n  console.log(myFunction);\n  console.log(celda);\n  return function (dispatch) {\n    var data = {\n      coordinates: coordinates\n    };\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      myFunction(celda, data);\n      console.log(\"respuesta del estado de la celda:\");\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })[\"catch\"](function (error) {\n      return console.log('error', error);\n    });\n  };\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"se resetea el juego\");\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\");\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\");\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\");\n        }\n      }\n    }\n  }\n\n  return {\n    type: GAME_STATUS,\n    gameStatus: gameStatus\n  };\n}\nexport function markTheBoard() {\n  fetch('/game/push/flag', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    myFunction(celda, data);\n    console.log(\"respuesta del estado de la celda:\");\n    console.log(data.cell_status);\n    dispatch(flagSuccess(data.cell_status));\n  })[\"catch\"](function (error) {\n    return console.log('error', error);\n  });\n}","map":{"version":3,"sources":["/home/valter/Documents/HOMIE/PROYECTO/Proyect/SEARCH_MINES_V1/app/javascript/src/actions/actions.js"],"names":["loadGame","startBoard","START_GAME_SUCCESS","RESET_GAME","CELL_STATUS","GAME_STATUS","UPDATE_GAME","FLIP_CELL","LOAD_BOARD_SUCCESS","startGameBoardZZ","startGameSuccess","startGameBoard","console","log","boardWithMines","dispatch","data","board","game_status","board_status","flipped_boxes","fetch","method","body","JSON","stringify","headers","then","response","json","game_id","$oid","startGameExit","error","type","gameId","restartGame","switchFlag","coordinates","myFunction","celda","cell_status","flagSuccess","cellStatus","knowTheGameState","gameStatus","markTheBoard"],"mappings":"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","sourcesContent":["import { loadGame, startBoard } from '../api/gameApi';\nimport {\n  START_GAME_SUCCESS,\n  RESET_GAME,\n  CELL_STATUS,\n  GAME_STATUS,\n  UPDATE_GAME,\n  FLIP_CELL,\n  LOAD_BOARD_SUCCESS\n} from '../constants/actionTypes';\n\nexport function startGameBoardZZ() {\n  //console.log(\"estoy en funcion startGameBoard dentro de /actions\");\n  return (startGameSuccess(loadGame()));\n}\n\n//export function startGameSuccess() {\nexport function startGameBoard() {\n  console.log(\"Estoy en startGameBoard dentro de /actions\")\n  //console.log(props)\n  var boardWithMines = loadGame()\n  console.log(boardWithMines);\n  console.log(\"listo\")\n  return function(dispatch) {\n    console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\")\n    let data = {\n      board: boardWithMines,\n      game_status: 0,\n      board_status: startBoard(),\n      flipped_boxes: 0\n    }\n    fetch('/game/start', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"respuesta del controlador con el ID:\");\n      console.log(data);\n      console.log(data.game_id);\n      console.log(data.game_id.$oid);\n      dispatch(startGameExit(data));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction startGameExit(data) {\n  console.log(\"ULTIMA FUNCION EN EJECUCION\")\n  return {\n    type: START_GAME_SUCCESS,\n    gameId: data\n  };\n}\n\nexport function restartGame() {\n  startGameBoard();\n}\n\nexport function switchFlag(coordinates, myFunction, celda) {\n  console.log(\"estamos en la funcion switchFlag\");\n  console.log(coordinates)\n  console.log(myFunction)\n  console.log(celda)\n  return function(dispatch) {\n    let data = {\n      coordinates: coordinates\n    }\n    fetch('/game/flag', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .then(data => {\n      myFunction(celda, data)\n      console.log(\"respuesta del estado de la celda:\")\n      console.log(data.cell_status);\n      dispatch(flagSuccess(data.cell_status));\n    })\n    .catch(error => console.log('error', error));\n  }\n}\n\nfunction flagSuccess(response) {\n  console.log(\"se obtuvo el valor de la celda:\");\n  console.log(response);\n  return {\n    type: CELL_STATUS,\n    cellStatus: response\n  };\n}\n\nexport function knowTheGameState(gameStatus) {\n  if (gameStatus == 3) {\n    console.log(\"se resetea el juego\")\n  } else {\n    if (gameStatus == 0) {\n      console.log(\"ya se estaba jugando, restaurar el tablero guardado\")\n    } else {\n      if (gameStatus == 1) {\n        console.log(\"El jugador ha perdido\")\n      } else {\n        if (gameStatus == 2) {\n          console.log(\"El jugador ha ganado\")\n        }\n      }\n    }\n  }\n  return {\n    type: GAME_STATUS,\n    gameStatus: gameStatus\n  }\n}\n\nexport function markTheBoard () {\n  fetch('/game/push/flag', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {'Content-Type': 'application/json' }\n  })\n  .then(response => response.json())\n  .then(data => {\n    myFunction(celda, data)\n    console.log(\"respuesta del estado de la celda:\")\n    console.log(data.cell_status);\n    dispatch(flagSuccess(data.cell_status));\n  })\n  .catch(error => console.log('error', error));\n}"]},"metadata":{},"sourceType":"module"}